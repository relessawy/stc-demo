package deduction;

import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class RuleValidation implements java.io.Serializable {

	static final long serialVersionUID = 1L;

	private Map<String, String> englishMessages = new HashMap<String, String>();
	private Map<String, String> arabicMessages = new HashMap<String, String>();
	private ArrayList<String> keys = new ArrayList<String>();

	private java.lang.String key;

	private java.lang.String message;

	private java.lang.String language = "en";

	public RuleValidation() {
		englishMessages.put("rule01", "Error while fetching your data, Please try again later");
		arabicMessages.put("rule01", "عذرا حصل خطا اثناء محاولة استعادة بياناتك, الرجاء المحاولة في وقت لاحق");

		englishMessages.put("rule02", "Deduction amount cannot be greater than net salary");
		arabicMessages.put("rule02", "المبلغ المراد خصمه لا يمكن ان يكون اكبر من اجمالي الراتب");

		englishMessages.put("rule03",
				"You can't request for Fitness Time more than one time per year if your previous request is accepted");
		arabicMessages.put("rule03",
				"لا يمكن تقديم طلب استقطاع بخصوص وقت اللياقة أكثر من مرة واحدة فى العام إذا تم الموافقة");

		englishMessages.put("rule04",
				"You have already raised the request and it is pending with Compensation Department for Approval");
		arabicMessages.put("rule04", "يوجد لديك طلب سابق معلق");

		englishMessages.put("rule05", "Record Already Exists for the given service for that employee");
		arabicMessages.put("rule05", "يوجد لديك طلب سابق");

		englishMessages.put("rule06", "You can’t stop donation for one time donations");
		arabicMessages.put("rule06", "لا يمكن ايقاف الخصم من الراتب لطلب اقتطاع مرة واحدة");
	}

	public java.lang.String getKey() {
		return this.key;
	}

	public void addValidationRule(java.lang.String key) {
		int pos = this.keys.indexOf(key);
		if (pos == -1)
			this.keys.add(key);
		// this.message = language.equals("ar") ? arabicMessages.get(key) :
		// englishMessages.get(key);
	}

	public void setKey(java.lang.String key) {
		this.key = key;
		this.keys.clear();
		this.keys.add(key);

		// this.message = language.equals("ar") ? arabicMessages.get(key) :
		// englishMessages.get(key);
	}

	public java.lang.String getMessage() {
		// return this.message;
		this.message = "";
		for (String key : this.keys) {
			this.message += "-" + (language.equals("ar") ? arabicMessages.get(key) : englishMessages.get(key));
		}
		return this.message;
	}

	public void setMessage(java.lang.String message) {
		// this.message = message;
	}

	public java.lang.String getLanguage() {
		return this.language;
	}

	public void setLanguage(java.lang.String language) {
		this.language = language;
		// if(key!=null)
		// this.message = language.equals("ar") ? arabicMessages.get(key) :
		// englishMessages.get(key);
	}

	public RuleValidation(java.lang.String key, java.lang.String message, java.lang.String language) {
		this();
		this.key = key;
		this.message = message;
		this.language = language;
	}

	@Override
	public String toString() {
		return "RuleValidation [englishMessages=" + englishMessages + ", arabicMessages=" + arabicMessages + ", keys="
				+ keys + ", key=" + key + ", message=" + message + ", language=" + language + "]";
	}

}